import "customGameSettings.json";

globalvar define OrisaMountable;
globalvar define ReinChargeCancel;
globalvar define ReinFullThrottle;
globalvar define WinstonPrimalHealth;
globalvar define DoomfistKBResist;
globalvar define DoomfistBastionKnockout;
globalvar define MeiIceBlockDamage;
globalvar define MeiAntiFreeze;
globalvar define MeiRollingSnowballUlt;
globalvar define AnaSleepDamage;
globalvar define BrigitteFix;
globalvar define LucioBeatDamage;
globalvar define LucioBeatSelfKnockback;
globalvar define LucioBoopSelfKnockback;

globalvar define EnabledHeroes;
globalvar define ActionButtons;

playervar define LastHero;
playervar define PlayerParent;
playervar define PlayerChild;
playervar define ChargeStatus;
playervar define LastChargeUsage;
playervar define IceBlockVictims;
playervar define Snowball;
playervar define SnowballTime;
playervar define SnowballVictims;
playervar define SnowballFacing;
playervar define BeatStatus;
playervar define LastBeatUsage;


define RemoveY(Vector vector)
{
    return Vector(XOf(vector), 0, ZOf(vector));
}

void SetThirdPerson(Player player, Number distance, Number height, Boolean removeY)
{
    define direction = removeY ? RemoveY(FacingDirectionOf(player)) : FacingDirectionOf(player);
    StartCamera(
        Player         : player,
        EyePosition    : UpdateEveryFrame(PositionOf(player) + Up() * height + direction * -distance),
        LookAtPosition : UpdateEveryFrame(PositionOf(player) + direction * 1000),
        BlendSpeed     : 0
    );
}

define AbleToAct(Player player)
{
    return !(
        HasStatus(player, Status.Asleep) ||
        HasStatus(player, Status.Frozen) ||
        HasStatus(player, Status.Hacked) ||
        HasStatus(player, Status.KnockedDown) ||
        HasStatus(player, Status.Stunned)
    );
}

define AbleToBeMounted(Player player)
{
    return !(
        HasStatus(player, Status.Asleep) ||
        HasStatus(player, Status.Hacked) ||
        HasStatus(player, Status.KnockedDown) ||
        IsInSpawnRoom(EventPlayer())
    );
}

define MountPlayer(Player child, Player parent, Vector offset)
{
    AttachPlayers(child, parent, offset);
    parent.PlayerChild = child;
    child.PlayerParent = parent;
}

define DismountPlayer(Player child)
{
    DetachPlayers(child);
    child.PlayerParent.PlayerChild = null;
    child.PlayerParent = null;
}


rule: "Initialize Globals"
{
    OrisaMountable = WorkshopSettingToggle("Orisa", "Mountable", false, 0);
    ReinChargeCancel = WorkshopSettingToggle("Reinhardt", "Charge Cancel", true, 0);
    ReinFullThrottle = WorkshopSettingToggle("Reinhardt", "Full Throttle", false, 1);
    WinstonPrimalHealth = WorkshopSettingToggle("Winston", "Extra Primal Rage Health", true, 0);
    DoomfistKBResist = WorkshopSettingToggle("Doomfist", "Knockback Resistance (when using abilities)", true, 0);
    DoomfistBastionKnockout = WorkshopSettingToggle("Doomfist", "Rocket Punch Removes Bastion Sentry Mode", true, 1);
    MeiIceBlockDamage = WorkshopSettingToggle("Mei", "Cryo-Freeze Damage", true, 0);
    MeiAntiFreeze = WorkshopSettingToggle("Mei", "Anti-Freeze", true, 1);
    MeiRollingSnowballUlt = WorkshopSettingToggle("Mei", "Rolling Snowball Ultimate", true, 2);
    AnaSleepDamage = WorkshopSettingToggle("Ana", "Sleeping Enemies Take Extra Damage", false, 0);
    BrigitteFix = WorkshopSettingToggle("Brigitte", "Fix", true, 0);
    LucioBeatDamage = WorkshopSettingToggle("Lúcio", "Sound Barrier Damage", true, 0);
    LucioBeatSelfKnockback = WorkshopSettingToggle("Lúcio", "Sound Barrier Self-Knockback", true, 1);
    LucioBoopSelfKnockback = WorkshopSettingToggle("Lúcio", "Soundwave Self-Knockback", true, 2);

    EnabledHeroes = AllHeroes();
    ActionButtons = [Button.Ability1, Button.Ability2, Button.Crouch, Button.Jump, Button.Melee, Button.PrimaryFire, Button.Reload, Button.SecondaryFire, Button.Ultimate];
}

rule: "Player Initialization"
Event.OnPlayerJoin
{
    SetAllowedHeroes(EventPlayer(), EnabledHeroes);
}

rule: "Orisa Horse Mount"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (OrisaMountable)
{
    define target = RayCastHitPlayer(
        StartPOS                  : EventPlayer(),
        EndPOS                    : EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 3,
        PlayersToInclude          : AllPlayers(TeamOf(EventPlayer())),
        PlayersToExclude          : EventPlayer(),
        IncludePlayerOwnedObjects : false
    );
    if (target != null && target.Hero() == Hero.Orisa && target.PlayerChild == null && EventPlayer().PlayerParent == null && AbleToBeMounted(target))
    {
        MountPlayer(EventPlayer(), target, Vector(0, 1.5, 0));
        while (EventPlayer().PlayerParent != null)
        {
            Wait(0.2, WaitBehavior.IgnoreCondition);
            if (!AbleToBeMounted(EventPlayer().PlayerParent))
            {
                DismountPlayer(EventPlayer());
                break;
            }
        }
    }
}

rule: "Orisa Horse Dismount"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (PlayerParent != null)
{
    DismountPlayer(EventPlayer());
}

rule: "Orisa Horse Death"
Event.OnDeath
Player.Orisa
if (PlayerChild != null)
{
    DismountPlayer(EventPlayer().PlayerChild);
}

rule: "Rein Using Charge"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == true)
if (ChargeStatus == 0)
{
    ChargeStatus = 1;
    LastChargeUsage = TotalTimeElapsed();
}

rule: "Rein Stopped Using Charge"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == false)
{
    ChargeStatus = 0;
}

rule: "Rein Charge Cancel"
Event.OngoingPlayer
Player.Reinhardt
if (IsButtonHeld(EventPlayer(), Button.Ability1) == true)
if (IsUsingAbility1(EventPlayer()) == true)
if (TotalTimeElapsed() - LastChargeUsage > 0.5)
if (ReinChargeCancel)
{
    CancelPrimaryAction(EventPlayer());
    ApplyImpulse(EventPlayer(), FacingDirectionOf(EventPlayer()) + Vector(0, 0.1, 0), 10, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Rein Full Throttle"
Event.OngoingPlayer
if (ReinFullThrottle)
{
    LastHero = HeroOf(EventPlayer());
    MinWait();
    if (LastHero != HeroOf(EventPlayer()))
    {
        if (HeroOf(EventPlayer()) == Hero.Reinhardt)
        {
            ForceThrottle(EventPlayer(), 1, 1, 0, 0, 0, 1);
        }
        else
        {
            StopForcingThrottle(EventPlayer());
        }
    }
    Loop();
}

rule: "Winston Bonus HP"
Event.OngoingPlayer
if (IsUsingUltimate())
if (WinstonPrimalHealth)
{
    if (EventPlayer().Hero() == Hero.Winston) {
        EventPlayer().SetMaxHealth(150);
        MinWait();
        SetPlayerHealth(EventPlayer(), EventPlayer().MaxHealth());
        WaitUntil(EventPlayer().Hero() != Hero.Winston || !IsUsingUltimate(EventPlayer()), 120);
        EventPlayer().SetMaxHealth(100);
    }
}

rule: "Doomfist KB Resist"
Event.PlayerReceivedKnockback
Player.Doomfist
if (DoomfistKBResist)
if (IsUsingAbility1(EventPlayer()) || IsUsingAbility2(EventPlayer()) || IsFiringSecondary(EventPlayer()))
{
    SetKnockbackReceived(EventPlayer(), 50);
}

rule: "Doomfist Bastion Punch"
Event.OnDamageTaken
Player.Bastion
if (HeroOf(Attacker()) == Hero.Doomfist)
if (EventAbility() == Button.SecondaryFire)
if (DoomfistBastionKnockout)
{
    CancelPrimaryAction(EventPlayer());
    SetStatus(EventPlayer(), Attacker(), Status.Stunned, 0.5);
    SetGravity(EventPlayer(), 10);
    ApplyImpulse(EventPlayer(), EventDirection() + Vector(0, 0.05, 0), 25, Relative.ToWorld, ContraryMotion.Cancel);
    Wait(0.3, WaitBehavior.IgnoreCondition);
    SetGravity(EventPlayer(), 100);
}

rule: "Mei Ice Block Damage"
Event.OngoingPlayer
Player.Mei
if (IsUsingAbility1(EventPlayer()))
{
    IceBlockVictims = EmptyArray();
    while (IsUsingAbility1(EventPlayer()))
    {
        if (YOf(VelocityOf(EventPlayer())) < -5)
        foreach (define player in AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))))
        {
            if (DistanceBetween(PositionOf(EventPlayer()) + Vector(0, -1, 0), EyePosition(player)) < 1.3 && !ArrayContains(IceBlockVictims, player))
            {
                Damage(player, EventPlayer(), 2000);
                ModifyVariable(IceBlockVictims, Operation.AppendToArray, player);
            }
        }
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }
}

rule: "Anti-Freeze"
Event.OngoingPlayer
if (HasStatus(EventPlayer(), Status.Frozen))
if (MeiAntiFreeze)
{
    ClearStatus(EventPlayer(), Status.Frozen);
}

rule: "Mei Snowball"
Event.OngoingPlayer
Player.Mei
if (IsUsingUltimate(EventPlayer()))
if (MeiRollingSnowballUlt)
{
    Wait(0.3);
    CancelPrimaryAction(EventPlayer());
    if (Snowball == null && AbleToAct(EventPlayer()))
    {
        SetStatus(EventPlayer(), EventPlayer(), Status.PhasedOut, 3.0);
        CreateEffect(
            VisibleTo    : AllPlayers(Team.All),
            Type         : Effect.Sphere,
            Color        : Color.Aqua,
            Position     : UpdateEveryFrame(PositionOf(EventPlayer()) + Up()),
            Radius       : 1,
            Reevaluation : EffectRev.VisibleToPositionAndRadius
        );
        Snowball = LastCreatedEntity();
        SnowballVictims = EmptyArray();
        SnowballFacing = RemoveY(FacingDirectionOf(EventPlayer()));
        SetInvisible(EventPlayer(), InvisibleTo.All);
        SetFacing(EventPlayer(), SnowballFacing - Vector(0, 100, 0), Relative.ToWorld);
        StartFacing(EventPlayer(), SnowballFacing - Vector(0, 100, 0), 0, Relative.ToWorld, FacingRev.None);
        SetThirdPerson(EventPlayer(), 5, 3, true);
        SetMoveSpeed(EventPlayer(), 200);
        ForceThrottle(EventPlayer(), 1, 1, 0, 0, 0, 0);
        foreach (define button in ActionButtons)
        {
            DisallowButton(EventPlayer(), button);
        }
        AllowButton(EventPlayer(), Button.PrimaryFire);
        SetAmmo(EventPlayer(), 0, MaxAmmo(EventPlayer()));
        StartHoldingButton(EventPlayer(), Button.PrimaryFire);
        SnowballTime = 3.0;
        CreateProgressBarHudText(
            VisibleTo         : EventPlayer(),
            Value             : 100 * SnowballTime / 3.0,
            Text              : null,
            Location          : Location.Top,
            SortOrder         : 10,
            ProgressBarColor  : Color.Aqua,
            TextColor         : Color.White,
            Reevaluation      : ProgressBarHudEvaluation.Values,
            NonteamSpectators : Spectators.DefaultVisibility
        );
        define progressID = LastTextID();
        ChaseVariableAtRate(SnowballTime, 0.0, 1.0, RateChaseReevaluation.None);
        PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.White, PositionOf(EventPlayer()) + Up(), 1);
        CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White, EventPlayer(), 400, EffectRev.PositionAndRadius);
        define snowballSoundLow = LastCreatedEntity();
        CreateEffect(AllPlayers(), Effect.SparklesSound, Color.White, EventPlayer(), 100, EffectRev.PositionAndRadius);
        define snowballSoundHigh = LastCreatedEntity();
        CreateEffect(AllPlayers(), Effect.Sparkles, Color.White, UpdateEveryFrame(PositionOf(EventPlayer()) + Up()), 1, EffectRev.VisibleToPositionAndRadius);
        define snowballEffectSparkles = LastCreatedEntity();
        CreateEffect(AllPlayers(), Effect.Cloud, Color.White, UpdateEveryFrame(PositionOf(EventPlayer()) + Up()), 1, EffectRev.VisibleToPositionAndRadius);
        define snowballEffectClouds = LastCreatedEntity();
        while (SnowballTime > 0.0)
        {
            MinWait();
            foreach (define player in AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))))
            {
                if (!ArrayContains(SnowballVictims, player) &&
                    DistanceBetween(EventPlayer(), player) < 2 &&
                    IsInLineOfSight(EventPlayer(), player, BarrierLOS.EnemyBarriersBlock))
                {
                    Damage(player, EventPlayer(), 300);
                    ApplyImpulse(player, player - EventPlayer() + Up() * 0.5, 25, Relative.ToWorld, ContraryMotion.Cancel);
                    ModifyVariable(SnowballVictims, Operation.AppendToArray, player);
                }
            }
        }
        DestroyProgressBarHudText(progressID);
        DestroyEffect(Snowball);
        DestroyEffect(snowballSoundLow);
        DestroyEffect(snowballSoundHigh);
        DestroyEffect(snowballEffectSparkles);
        DestroyEffect(snowballEffectClouds);
        Snowball = null;
        SetInvisible(EventPlayer(), InvisibleTo.None);
        SetFacing(EventPlayer(), SnowballFacing, Relative.ToWorld);
        StopFacing(EventPlayer());
        StopCamera(EventPlayer());
        SetMoveSpeed(EventPlayer(), 100);
        StopForcingThrottle(EventPlayer());
        foreach (define button in ActionButtons)
        {
            AllowButton(EventPlayer(), button);
        }
        StopHoldingButton(EventPlayer(), Button.PrimaryFire);
        SetAmmo(EventPlayer(), 0, MaxAmmo(EventPlayer()));
    }
}

rule: "Ana Sleep Damage"
Event.OnDamageTaken
if (Attacker().Hero() == Hero.Ana)
if (EventAbility() == Button.Ability1)
if (AnaSleepDamage)
{
    SetDamageReceived(EventPlayer(), 200);
    WaitUntil(!HasStatus(EventPlayer(), Status.Asleep), 120);
    SetDamageReceived(EventPlayer(), 100);
}

rule: "Brigitte Fix"
if (BrigitteFix)
{
    ModifyVariable(EnabledHeroes, Operation.RemoveFromArrayByValue, Hero.Brigitte);
}

rule: "Lucio Using Beat"
Event.OngoingPlayer
Player.Lucio
if (IsUsingUltimate(EventPlayer()) == true)
if (BeatStatus == 0)
{
    BeatStatus = 1;
    LastBeatUsage = TotalTimeElapsed();
}

rule: "Lucio Stopped Using Beat"
Event.OngoingPlayer
Player.Lucio
if (IsUsingUltimate(EventPlayer()) == false)
{
    BeatStatus = 0;
}

rule: "Lucio Hit Ground"
Event.OngoingPlayer
Player.Lucio
if (IsOnGround(EventPlayer()) == true)
if (BeatStatus == 1)
if (TotalTimeElapsed() - LastBeatUsage > 0.7)
{
    BeatStatus = 2;
    if (LucioBeatSelfKnockback)
    {
        ApplyImpulse(EventPlayer(), Up(), 20, Relative.ToWorld, ContraryMotion.Cancel);
    }
    if (LucioBeatDamage)
    {
        Damage(PlayersWithinRadius(PositionOf(EventPlayer()) + Vector(0, -2, 0), 1.5, OppositeTeamOf(TeamOf(EventPlayer())), RadiusLOS.SurfacesAndEnemyBarriers), EventPlayer(), 2000);
    }
}

rule: "Lucio Boop Knockback"
Event.OngoingPlayer
Player.Lucio
if (IsFiringSecondary(EventPlayer()) == true)
if (AngleBetweenVectors(FacingDirectionOf(EventPlayer()), Down()) < 10)
if (LucioBoopSelfKnockback)
{
    ApplyImpulse(EventPlayer(), FacingDirectionOf(EventPlayer()) * -1, 10, Relative.ToWorld, ContraryMotion.CancelXYZ);
}

rule: "Instant Abilities"
Event.OngoingPlayer
if (WorkshopSettingToggle("Debug", "Instant Abilities (Crouch + Interact)", false, 0) == true)
if (IsButtonHeld(EventPlayer(), Button.Interact) == true)
if (IsButtonHeld(EventPlayer(), Button.Crouch) == true)
{
    SetUltimateCharge(EventPlayer(), 100);
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
    SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 0);
}

rule: "Spawn/Summon Bot"
Event.OngoingPlayer
if (WorkshopSettingToggle("Debug", "Enemy Dummy Bot (Interact)", false, 0) == true)
if (IsButtonHeld(EventPlayer(), Button.Interact) == true)
if (IsButtonHeld(EventPlayer(), Button.Crouch) == false)
{
    if (IsDummyBot(PlayersInSlot(0, Team.Team2)))
    {
        Teleport(PlayersInSlot(0, Team.Team2), EventPlayer());
    }
    else
    {
        CreateDummyBot(Hero.Ana, Team.Team2, 0, PositionOf(EventPlayer()), FacingDirectionOf(EventPlayer()));
    }
}
