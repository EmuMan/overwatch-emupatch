import "customGameSettings.json";

globalvar define OrisaMountable;
globalvar define OrisaMovementSpeed;
globalvar define OrisaDamageFalloff;
globalvar define OrisaShieldHealth;
globalvar define OrisaShieldCooldown;
globalvar define ReinChargeCancel;
globalvar define ReinFireStrikeCharges;
globalvar define ReinFireStrikeDamage;
globalvar define ReinFullThrottle;
globalvar define RoadhogDamageReduction;
globalvar define RoadhogHookDamage;
globalvar define RoadhogPelletDamage;
globalvar define RoadhogRateOfFire;
globalvar define SigmaBarrierHealth;
globalvar define WinstonPrimalHealth;
globalvar define WinstonJumpPackCooldown;
globalvar define WreckingBallDecreasedAmmo;
globalvar define ZaryaProjectedBarrierCharges;
globalvar define DoomfistKBResist;
globalvar define DoomfistExtraShields;
globalvar define DoomfistBastionKnockout;
globalvar define EchoDuplicateKill;
globalvar define MeiIceBlockDamage;
globalvar define MeiIceBlockBackfire;
globalvar define MeiAntiFreeze;
globalvar define MeiRollingSnowballUlt;
globalvar define PharahQuickFall;
globalvar define ReaperUltGravity;
globalvar define ReaperUltJump;
globalvar define TracerLifesteal;
globalvar define AnaSleepDamage;
globalvar define LucioBeatDamage;
globalvar define LucioBeatSelfKnockback;
globalvar define LucioBoopSelfKnockback;

globalvar define EnabledHeroes;
globalvar define ActionButtons;

playervar define LastHero;
playervar define PlayerParent;
playervar define PlayerChild;
playervar define ChargeStatus;
playervar define FireStrikeCharges;
playervar define FireStrikeProgress;
playervar define FireStrikeProgressBar;
playervar define ProjBarrierCharges;
playervar define ProjBarrierProgress;
playervar define ProjBarrierProgressBar;
playervar define LastChargeUsage;
playervar define DoomfistShields;
playervar define DoomfistShieldPoolID;
playervar define IsBeingPunched;
playervar define EchoDuplicateKiller;
playervar define IceBlockVictims;
playervar define Snowball;
playervar define SnowballTime;
playervar define SnowballVictims;
playervar define SnowballFacing;
playervar define BeatStatus;
playervar define LastBeatUsage;


define RemoveY(Vector vector)
{
    return Vector(XOf(vector), 0, ZOf(vector));
}

void SetThirdPerson(Player player, Number distance, Number height, Boolean removeY)
{
    define direction = removeY ? RemoveY(FacingDirectionOf(player)) : FacingDirectionOf(player);
    StartCamera(
        Player         : player,
        EyePosition    : UpdateEveryFrame(PositionOf(player) + Up() * height + direction * -distance),
        LookAtPosition : UpdateEveryFrame(PositionOf(player) + direction * 1000),
        BlendSpeed     : 0
    );
}

define AbleToAct(Player player)
{
    return !(
        HasStatus(player, Status.Asleep) ||
        HasStatus(player, Status.Frozen) ||
        HasStatus(player, Status.Hacked) ||
        HasStatus(player, Status.KnockedDown) ||
        HasStatus(player, Status.Stunned)
    );
}

define AbleToBeMounted(Player player)
{
    return !(
        HasStatus(player, Status.Asleep) ||
        HasStatus(player, Status.Hacked) ||
        HasStatus(player, Status.KnockedDown) ||
        IsInSpawnRoom(EventPlayer())
    );
}

define MountPlayer(Player child, Player parent, Vector offset)
{
    AttachPlayers(child, parent, offset);
    parent.PlayerChild = child;
    child.PlayerParent = parent;
}

define DismountPlayer(Player child)
{
    DetachPlayers(child);
    child.PlayerParent.PlayerChild = null;
    child.PlayerParent = null;
}

define UpdateDoomfistShields(Player player)
{
    RemoveHealthPoolFromPlayer(player.DoomfistShieldPoolID);
    AddHealthPoolToPlayer(player, HealthType.Shields, player.DoomfistShields, false, false);
    player.DoomfistShieldPoolID = LastCreatedHealthPool();
}

void FireStrikeChargeUpdate() playervar "Fire Strike Charge Update"
{
    while (FireStrikeCharges < 2)
    {
        ChaseVariableAtRate(FireStrikeProgress, 6, 1, RateChaseReevaluation.None);
        Wait(6 - FireStrikeProgress);
        FireStrikeCharges++;
        if (FireStrikeCharges < 2)
        {
            FireStrikeProgress = 0;
        }
        SetAbility2Enabled(EventPlayer(), true);
    }
}

void ProjBarrierChargeUpdate() playervar "Projected Barrier Charge Update"
{
    while (ProjBarrierCharges < 2)
    {
        ChaseVariableAtRate(ProjBarrierProgress, 8, 1, RateChaseReevaluation.None);
        Wait(8 - ProjBarrierProgress);
        ProjBarrierCharges++;
        if (ProjBarrierCharges < 2)
        {
            ProjBarrierProgress = 0;
        }
        SetAbility2Enabled(EventPlayer(), true);
    }
}


rule: "Initialize Globals"
{
    OrisaMountable = WorkshopSettingToggle("Orisa", "Mountable", true, 0);
    OrisaMovementSpeed = WorkshopSettingToggle("Orisa", "Increased Movement Speed (Outside of Fortify)", true, 1);
    OrisaDamageFalloff = WorkshopSettingToggle("Orisa", "Fusion Driver Damage Falloff", true, 2);
    OrisaShieldHealth = WorkshopSettingToggle("Orisa", "Protective Barrier Health Decreased", true, 3);
    OrisaShieldCooldown = WorkshopSettingToggle("Orisa", "Protective Barrier Cooldown Decreased", true, 4);
    ReinChargeCancel = WorkshopSettingToggle("Reinhardt", "Charge Cancel", true, 0);
    ReinFireStrikeCharges = WorkshopSettingToggle("Reinhardt", "Fire Strike Two Charges", true, 1);
    ReinFireStrikeDamage = WorkshopSettingToggle("Reinhardt", "Fire Strike Damage Decreased", true, 2);
    ReinFullThrottle = WorkshopSettingToggle("Reinhardt", "Full Throttle", false, 3);
    RoadhogDamageReduction = WorkshopSettingToggle("Roadhog", "Take a Breather Lower Damage Reduction", true, 0);
    RoadhogHookDamage = WorkshopSettingToggle("Roadhog", "Chain Hook Damage Increased", true, 1);
    RoadhogPelletDamage = WorkshopSettingToggle("Roadhog", "Scrap Gun Damage Decreased", true, 2);
    RoadhogRateOfFire = WorkshopSettingToggle("Roadhog", "Scrap Gun Rate of Fire Decreased", true, 3);
    SigmaBarrierHealth = WorkshopSettingToggle("Sigma", "Experimental Barrier Health Decreased", true, 0);
    WinstonPrimalHealth = WorkshopSettingToggle("Winston", "Extra Primal Rage Health", true, 0);
    WinstonJumpPackCooldown = WorkshopSettingToggle("Winston", "Jump Pack Cooldown Decreased", true, 1);
    WreckingBallDecreasedAmmo = WorkshopSettingToggle("Wrecking Ball", "Maximum Ammo Decreased", true, 0);
    ZaryaProjectedBarrierCharges = WorkshopSettingToggle("Zarya", "Projected Barrier Two Charges", true, 0);
    DoomfistKBResist = WorkshopSettingToggle("Doomfist", "Knockback Resistance (when using abilities)", true, 0);
    DoomfistExtraShields = WorkshopSettingToggle("Doomfist", "Extra Shields from Passive", true, 1);
    DoomfistBastionKnockout = WorkshopSettingToggle("Doomfist", "Rocket Punch Removes Bastion Sentry Mode", true, 2);
    EchoDuplicateKill = WorkshopSettingToggle("Echo", "Echo Death on Duplicate Kill", true, 0);
    MeiIceBlockDamage = WorkshopSettingToggle("Mei", "Cryo-Freeze Damage", true, 0);
    MeiIceBlockBackfire = WorkshopSettingToggle("Mei", "Cryo-Freeze Backfire Chance", false, 1);
    MeiAntiFreeze = WorkshopSettingToggle("Mei", "Anti-Freeze", true, 2);
    MeiRollingSnowballUlt = WorkshopSettingToggle("Mei", "Rolling Snowball Ultimate", true, 3);
    PharahQuickFall = WorkshopSettingToggle("Pharah", "Pharah Quick Fall (Crouch)", true, 0);
    ReaperUltGravity = WorkshopSettingToggle("Reaper", "Death Blossom Increased Gravity", false, 0);
    ReaperUltJump = WorkshopSettingToggle("Reaper", "Death Blossom Increased Jump", false, 1);
    TracerLifesteal = WorkshopSettingToggle("Tracer", "Passive Lifesteal", false, 0);
    AnaSleepDamage = WorkshopSettingToggle("Ana", "Sleeping Enemies Take Extra Damage", false, 0);
    LucioBeatDamage = WorkshopSettingToggle("Lúcio", "Sound Barrier Damage", true, 0);
    LucioBeatSelfKnockback = WorkshopSettingToggle("Lúcio", "Sound Barrier Self-Knockback", true, 1);
    LucioBoopSelfKnockback = WorkshopSettingToggle("Lúcio", "Soundwave Self-Knockback", true, 2);

    EnabledHeroes = AllHeroes();
    ActionButtons = [Button.Ability1, Button.Ability2, Button.Crouch, Button.Jump, Button.Melee, Button.PrimaryFire, Button.Reload, Button.SecondaryFire, Button.Ultimate];
}

rule: "Player Initialization"
Event.OnPlayerJoin
{
    SetAllowedHeroes(EventPlayer(), EnabledHeroes);
}

rule: "On Player Hero Swap"
Event.OngoingPlayer
Player.All
{
    while (true)
    {
        LastHero = EventPlayer().Hero();
        Wait(1, WaitBehavior.IgnoreCondition);
        if (EventPlayer().Hero() != LastHero)
        {
            SetMaxHealth(EventPlayer(), 100);
            SetMoveSpeed(EventPlayer(), 100);
            SetDamageDealt(EventPlayer(), 100);
            SetDamageReceived(EventPlayer(), 100);
            SetGravity(EventPlayer(), 100);
            StopForcingThrottle(EventPlayer());
            RemoveAllHealthPoolsFromPlayer(EventPlayer());

            if (LastHero == Hero.Reinhardt)
            {
                DestroyProgressBarHudText(FireStrikeProgressBar);
            }
            else if (LastHero == Hero.Zarya)
            {
                DestroyProgressBarHudText(ProjBarrierProgressBar);
            }

            if (EventPlayer().Hero() == Hero.Reinhardt)
            {
                if (ReinFullThrottle)
                {
                    ForceThrottle(EventPlayer(), 1, 1, 0, 0, 0, 1);
                }
                if (ReinFireStrikeDamage)
                {
                    SetDamageDealt(EventPlayer(), 80);
                }
                if (ReinFireStrikeCharges)
                {
                    FireStrikeCharges = 2;
                    FireStrikeProgress = 6.0;
                    CreateProgressBarHudText(
                        VisibleTo         : EventPlayer(),
                        Value             : 100 * FireStrikeProgress / 6.0,
                        Text              : $"Charges: {FireStrikeCharges}",
                        Location          : Location.Top,
                        SortOrder         : 10,
                        ProgressBarColor  : Color.Orange,
                        TextColor         : Color.White,
                        Reevaluation      : ProgressBarHudEvaluation.Values,
                        NonteamSpectators : Spectators.DefaultVisibility
                    );
                    FireStrikeProgressBar = LastTextID();
                }
            }
            else if (EventPlayer().Hero() == Hero.Zarya && ZaryaProjectedBarrierCharges)
            {
                ProjBarrierCharges = 2;
                ProjBarrierProgress = 8.0;
                CreateProgressBarHudText(
                    VisibleTo         : EventPlayer(),
                    Value             : 100 * ProjBarrierProgress / 8.0,
                    Text              : $"Charges: {ProjBarrierCharges}",
                    Location          : Location.Top,
                    SortOrder         : 10,
                    ProgressBarColor  : Color.Purple,
                    TextColor         : Color.White,
                    Reevaluation      : ProgressBarHudEvaluation.Values,
                    NonteamSpectators : Spectators.DefaultVisibility
                );
                ProjBarrierProgressBar = LastTextID();
            }
            else if (EventPlayer().Hero() == Hero.WreckingBall && WreckingBallDecreasedAmmo)
            {
                SetMaxAmmo(EventPlayer(), 0, 70);
                SetAmmo(EventPlayer(), 0, 70);
            }
            else if (EventPlayer().Hero() == Hero.Sigma && SigmaBarrierHealth)
            {
                SetMaxHealth(EventPlayer(), 100 * (6 / 7));
                AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 300 * (1 / 7), true, false);
                AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 100 * (1 / 7), true, false);
            }
            else if (EventPlayer().Hero() == Hero.Orisa)
            {
                if (OrisaMovementSpeed)
                {
                    // Need this to cancel above action
                    SetMoveSpeed(EventPlayer(), 130);
                }
                if (OrisaShieldHealth)
                {
                    SetMaxHealth(EventPlayer(), 100 * (5 / 6));
                    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 200 * (1 / 6), true, false);
                    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 250 * (1 / 6), true, false);
                }
            }
        }
    }
}

rule: "Orisa Horse Mount"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (OrisaMountable)
{
    define target = RayCastHitPlayer(
        StartPOS                  : EventPlayer(),
        EndPOS                    : EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 3,
        PlayersToInclude          : AllPlayers(TeamOf(EventPlayer())),
        PlayersToExclude          : EventPlayer(),
        IncludePlayerOwnedObjects : false
    );
    if (target != null && target.Hero() == Hero.Orisa && target.PlayerChild == null && EventPlayer().PlayerParent == null && AbleToBeMounted(target))
    {
        MountPlayer(EventPlayer(), target, Vector(0, 1.5, 0));
        while (EventPlayer().PlayerParent != null)
        {
            Wait(0.2, WaitBehavior.IgnoreCondition);
            if (!AbleToBeMounted(EventPlayer().PlayerParent))
            {
                DismountPlayer(EventPlayer());
                break;
            }
        }
    }
}

rule: "Orisa Horse Dismount"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (PlayerParent != null)
{
    DismountPlayer(EventPlayer());
}

rule: "Orisa Horse Death"
Event.OnDeath
Player.Orisa
if (PlayerChild != null)
{
    DismountPlayer(EventPlayer().PlayerChild);
}

rule: "Orisa Movement Speed Increase"
Event.OngoingPlayer
Player.Orisa
if (!IsUsingAbility1(EventPlayer()))
if (OrisaMovementSpeed)
{
    SetMoveSpeed(EventPlayer(), 130);
}

rule: "Orisa Movement Speed Reset"
Event.OngoingPlayer
Player.Orisa
if (IsUsingAbility1(EventPlayer()))
if (OrisaMovementSpeed)
{
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Orisa Damage Falloff"
Event.OnDamageDealt
Player.Orisa
if (EventAbility() == Button.PrimaryFire)
if (OrisaDamageFalloff)
{
    define distance = DistanceBetween(Attacker(), Victim());
    if (distance < 30)
    {
        Damage(Victim(), Attacker(), Max(6, 6 - (6 / 20) * (distance - 10)));
    }
}

rule: "Orisa Shield Cooldown"
Event.OngoingPlayer
Player.Orisa
if (IsUsingAbility2(EventPlayer()))
if (OrisaShieldCooldown)
{
    WaitUntil(!IsUsingAbility2(EventPlayer()), 1);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 9);
}

rule: "Rein Using Charge"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == true)
if (ChargeStatus == 0)
{
    ChargeStatus = 1;
    LastChargeUsage = TotalTimeElapsed();
}

rule: "Rein Stopped Using Charge"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == false)
{
    ChargeStatus = 0;
}

rule: "Rein Charge Cancel"
Event.OngoingPlayer
Player.Reinhardt
if (IsButtonHeld(EventPlayer(), Button.Ability1) == true)
if (IsUsingAbility1(EventPlayer()) == true)
if (TotalTimeElapsed() - LastChargeUsage > 0.5)
if (ReinChargeCancel)
{
    CancelPrimaryAction(EventPlayer());
    ApplyImpulse(EventPlayer(), FacingDirectionOf(EventPlayer()) + Vector(0, 0.1, 0), 10, Relative.ToWorld, ContraryMotion.Incorporate);
}

rule: "Rein Fire Strike Charges"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()))
if (ReinFireStrikeCharges)
{
    FireStrikeCharges--;
    if (FireStrikeCharges == 0) {
        SetAbility2Enabled(EventPlayer(), false);
    }
    if (FireStrikeCharges == 1) // meaning it was just at 2
    {
        FireStrikeProgress = 0.0;
    }
    async FireStrikeChargeUpdate();
    WaitUntil(!IsUsingAbility2(EventPlayer()), 120);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
}

rule: "Rein Fire Strike Damage"
Event.OnDamageTaken
Player.Reinhardt
if (HeroOf(Attacker()) == Hero.Reinhardt)
if (ReinFireStrikeDamage)
{
    Damage(Victim(), Attacker(), EventDamage() * 0.25);
}

rule: "Roadhog Lower Damage Reduction"
Event.OngoingPlayer
Player.Roadhog
if (IsUsingAbility2(EventPlayer()))
if (RoadhogDamageReduction)
{
    SetDamageReceived(EventPlayer(), 120);
}

rule: "Roadhog Increase Damage Reduction"
Event.OngoingPlayer
Player.Roadhog
if (!IsUsingAbility2(EventPlayer()))
if (RoadhogDamageReduction)
{
    SetDamageReceived(EventPlayer(), 100);
}

// Instead of doing this on a damage-by-damage basis, I think
// it is much more efficient to change Roadhog's damage dealt
// based on whether or not he is using certain abilities.
rule: "Roadhog Damage Scrap Gun Modifier"
Event.OngoingPlayer
Player.Roadhog
if (!(IsUsingAbility1(EventPlayer()) || IsUsingUltimate(EventPlayer()) || IsMeleeing(EventPlayer())))
if (RoadhogPelletDamage)
{
    SetDamageDealt(EventPlayer(), 91);
}

rule: "Roadhog Damage Hook Modifier"
Event.OngoingPlayer
Player.Roadhog
if (IsUsingAbility1(EventPlayer()))
if (RoadhogHookDamage)
{
    SetDamageDealt(EventPlayer(), 133);
}

rule: "Roadhog Damage No Modifier (Ult + Melee)"
Event.OngoingPlayer
Player.Roadhog
if (IsUsingUltimate(EventPlayer()) || IsMeleeing(EventPlayer()) ||
    (!IsUsingAbility1(EventPlayer()) && !RoadhogPelletDamage))
if (RoadhogHookDamage || RoadhogPelletDamage)
{
    SetDamageDealt(EventPlayer(), 100);
}

rule: "Roadhog Decreased Rate of Fire"
Event.OngoingPlayer
Player.Roadhog
if (IsFiringPrimary(EventPlayer()) || IsFiringSecondary(EventPlayer()))
{
    DisallowButton(EventPlayer(), Button.PrimaryFire);
    DisallowButton(EventPlayer(), Button.SecondaryFire);
    Wait(1.06);
    AllowButton(EventPlayer(), Button.PrimaryFire);
    AllowButton(EventPlayer(), Button.SecondaryFire);
    if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
    {
        PressButton(EventPlayer(), Button.PrimaryFire);
    }
    else if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
    {
        PressButton(EventPlayer(), Button.SecondaryFire);
    }
}

rule: "Winston Bonus HP"
Event.OngoingPlayer
if (IsUsingUltimate())
if (WinstonPrimalHealth)
{
    if (EventPlayer().Hero() == Hero.Winston) {
        EventPlayer().SetMaxHealth(150);
        MinWait();
        SetPlayerHealth(EventPlayer(), EventPlayer().MaxHealth());
        WaitUntil(!IsUsingUltimate(EventPlayer()), 120);
        EventPlayer().SetMaxHealth(100);
    }
}

rule: "Winston Jump Pack Cooldown"
Event.OngoingPlayer
Player.Winston
if (EventPlayer().IsUsingAbility1())
if (!IsUsingUltimate(EventPlayer()))
if (WinstonJumpPackCooldown)
{
    MinWait();
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 5);
}

rule: "Zarya Projected Barrier Charges"
Event.OngoingPlayer
Player.Zarya
if (IsUsingAbility2(EventPlayer()))
if (ZaryaProjectedBarrierCharges)
{
    ProjBarrierCharges--;
    if (ProjBarrierCharges == 0) {
        SetAbility2Enabled(EventPlayer(), false);
    }
    if (ProjBarrierCharges == 1) // meaning it was just at 2
    {
        ProjBarrierProgress = 0.0;
    }
    async ProjBarrierChargeUpdate();
    WaitUntil(!IsUsingAbility2(EventPlayer()), 120);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
}

rule: "Doomfist KB Resist"
Event.PlayerReceivedKnockback
Player.Doomfist
if (DoomfistKBResist)
if (IsUsingAbility1(EventPlayer()) || IsUsingAbility2(EventPlayer()) || IsFiringSecondary(EventPlayer()))
{
    SetKnockbackReceived(EventPlayer(), 50);
}

rule: "Track Doomfist Punch"
Event.OnDamageTaken
if (Attacker().Hero() == Hero.Doomfist)
if (EventAbility() == Button.SecondaryFire)
{
    MinWait();
    IsBeingPunched = true;
    WaitUntil(!HasStatus(EventPlayer(), Status.Stunned), 120);
    IsBeingPunched = false;
}

rule: "Doomfist Extra Shields"
Event.OnDamageDealt
Player.Doomfist
if (EventAbility() == Button.Ability1 || EventAbility() == Button.Ability2 ||
    EventAbility() == Button.SecondaryFire || EventAbility() == Button.Ultimate)
if (DoomfistExtraShields)
{
    // i am pretty sure this redundancy is required for some reason.
    RemoveHealthPoolFromPlayer(DoomfistShieldPoolID);
    SetPlayerHealth(EventPlayer(), EventPlayer().Health() - HealthOfType(EventPlayer(), HealthType.Shields));
    define shieldsGained = 0;
    if (!(EventAbility() == Button.SecondaryFire && Victim().IsBeingPunched))
    {
        shieldsGained = EventAbility() == Button.Ultimate ? 90 : 45;
    }
    DoomfistShields = Min(200, DoomfistShields + shieldsGained);
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, DoomfistShields, false, false);
    DoomfistShieldPoolID = LastCreatedHealthPool();
}

rule: "Doomfist Shield Damage"
Event.OnDamageTaken
Player.Doomfist
if (DoomfistExtraShields)
{
    DoomfistShields -= Min(DoomfistShields, EventDamage());
}

rule: "Doomfist Shield Decay"
Event.OngoingPlayer
Player.Doomfist
if (DoomfistExtraShields)
{
    while (true)
    {
        WaitUntil(HealthOfType(EventPlayer(), HealthType.Shields) > 0, 120);
        while (HealthOfType(EventPlayer(), HealthType.Shields) > 0)
        {
            Wait(0.5, WaitBehavior.IgnoreCondition);
            RemoveHealthPoolFromPlayer(DoomfistShieldPoolID);
            DoomfistShields -= Min(2, DoomfistShields);
            if (DoomfistShields > 0)
            {
                AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, DoomfistShields, false, false);
                DoomfistShieldPoolID = LastCreatedHealthPool();
            }
        }
    }
}

rule: "Doomfist Bastion Punch"
Event.OnDamageTaken
Player.Bastion
if (HeroOf(Attacker()) == Hero.Doomfist)
if (EventAbility() == Button.SecondaryFire)
if (DoomfistBastionKnockout)
{
    CancelPrimaryAction(EventPlayer());
    SetStatus(EventPlayer(), Attacker(), Status.Stunned, 0.5);
    SetGravity(EventPlayer(), 10);
    ApplyImpulse(EventPlayer(), EventDirection() + Vector(0, 0.05, 0), 25, Relative.ToWorld, ContraryMotion.Cancel);
    Wait(0.3, WaitBehavior.IgnoreCondition);
    SetGravity(EventPlayer(), 100);
}

rule: "Echo Duplicate Sentence"
Event.OnDamageTaken
Player.Echo
if (IsDuplicating(EventPlayer()))
if (EventPlayer().Health() <= 1.0) // the wiki says that Echo's transformation occurs at HP < 1, and i'm too lazy to confirm that
if (EchoDuplicateKill)
{
    EchoDuplicateKiller = Attacker();
}

rule: "Echo Execute Kill Sentence"
Event.OngoingPlayer
Player.Echo
if (!IsDuplicating(EventPlayer()))
if (EchoDuplicateKiller != null)
if (EchoDuplicateKill)
{
    Kill(EventPlayer(), EchoDuplicateKiller);
    EchoDuplicateKiller = null;
}

rule: "Mei Ice Block Damage"
Event.OngoingPlayer
Player.Mei
if (IsUsingAbility1(EventPlayer()))
if (MeiIceBlockDamage)
{
    IceBlockVictims = EmptyArray();
    while (IsUsingAbility1(EventPlayer()))
    {
        if (YOf(VelocityOf(EventPlayer())) < -5)
        foreach (define player in AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))))
        {
            if (DistanceBetween(PositionOf(EventPlayer()) + Vector(0, -1, 0), EyePosition(player)) < 1.3 && !ArrayContains(IceBlockVictims, player))
            {
                Damage(player, EventPlayer(), 2000);
                ModifyVariable(IceBlockVictims, Operation.AppendToArray, player);
            }
        }
        Wait(0.1, WaitBehavior.IgnoreCondition);
    }
}

rule: "Mei Ice Block Backfire"
Event.OngoingPlayer
Player.Mei
if (IsUsingAbility1(EventPlayer()))
if (MeiIceBlockBackfire)
{
    if (RandomInteger(0, 99) < 5)
    {
        Kill(EventPlayer(), EventPlayer());
    }
}

rule: "Anti-Freeze"
Event.OngoingPlayer
if (HasStatus(EventPlayer(), Status.Frozen))
if (MeiAntiFreeze)
{
    ClearStatus(EventPlayer(), Status.Frozen);
}

rule: "Mei Snowball"
Event.OngoingPlayer
Player.Mei
if (IsUsingUltimate(EventPlayer()))
if (MeiRollingSnowballUlt)
{
    Wait(0.3);
    CancelPrimaryAction(EventPlayer());
    if (Snowball == null && AbleToAct(EventPlayer()))
    {
        SetStatus(EventPlayer(), EventPlayer(), Status.PhasedOut, 3.0);
        CreateEffect(
            VisibleTo    : AllPlayers(Team.All),
            Type         : Effect.Sphere,
            Color        : Color.Aqua,
            Position     : UpdateEveryFrame(PositionOf(EventPlayer()) + Up()),
            Radius       : 1,
            Reevaluation : EffectRev.VisibleToPositionAndRadius
        );
        Snowball = LastCreatedEntity();
        SnowballVictims = EmptyArray();
        SnowballFacing = RemoveY(FacingDirectionOf(EventPlayer()));
        SetInvisible(EventPlayer(), InvisibleTo.All);
        SetFacing(EventPlayer(), SnowballFacing - Vector(0, 100, 0), Relative.ToWorld);
        StartFacing(EventPlayer(), SnowballFacing - Vector(0, 100, 0), 0, Relative.ToWorld, FacingRev.None);
        SetThirdPerson(EventPlayer(), 5, 3, true);
        SetMoveSpeed(EventPlayer(), 200);
        ForceThrottle(EventPlayer(), 1, 1, 0, 0, 0, 0);
        foreach (define button in ActionButtons)
        {
            DisallowButton(EventPlayer(), button);
        }
        AllowButton(EventPlayer(), Button.PrimaryFire);
        SetAmmo(EventPlayer(), 0, MaxAmmo(EventPlayer()));
        StartHoldingButton(EventPlayer(), Button.PrimaryFire);
        SnowballTime = 3.0;
        CreateProgressBarHudText(
            VisibleTo         : EventPlayer(),
            Value             : 100 * SnowballTime / 3.0,
            Text              : null,
            Location          : Location.Top,
            SortOrder         : 10,
            ProgressBarColor  : Color.Aqua,
            TextColor         : Color.White,
            Reevaluation      : ProgressBarHudEvaluation.Values,
            NonteamSpectators : Spectators.DefaultVisibility
        );
        define progressID = LastTextID();
        ChaseVariableAtRate(SnowballTime, 0.0, 1.0, RateChaseReevaluation.None);
        PlayEffect(AllPlayers(), PlayEffect.GoodExplosion, Color.White, PositionOf(EventPlayer()) + Up(), 1);
        CreateEffect(AllPlayers(), Effect.BadAuraSound, Color.White, EventPlayer(), 400, EffectRev.PositionAndRadius);
        define snowballSoundLow = LastCreatedEntity();
        CreateEffect(AllPlayers(), Effect.SparklesSound, Color.White, EventPlayer(), 100, EffectRev.PositionAndRadius);
        define snowballSoundHigh = LastCreatedEntity();
        CreateEffect(AllPlayers(), Effect.Sparkles, Color.White, UpdateEveryFrame(PositionOf(EventPlayer()) + Up()), 1, EffectRev.VisibleToPositionAndRadius);
        define snowballEffectSparkles = LastCreatedEntity();
        CreateEffect(AllPlayers(), Effect.Cloud, Color.White, UpdateEveryFrame(PositionOf(EventPlayer()) + Up()), 1, EffectRev.VisibleToPositionAndRadius);
        define snowballEffectClouds = LastCreatedEntity();
        while (SnowballTime > 0.0)
        {
            MinWait();
            foreach (define player in AllPlayers(OppositeTeamOf(TeamOf(EventPlayer()))))
            {
                if (!ArrayContains(SnowballVictims, player) &&
                    DistanceBetween(EventPlayer(), player) < 2 &&
                    IsInLineOfSight(EventPlayer(), player, BarrierLOS.EnemyBarriersBlock))
                {
                    Damage(player, EventPlayer(), 300);
                    ApplyImpulse(player, player - EventPlayer() + Up() * 0.5, 25, Relative.ToWorld, ContraryMotion.Cancel);
                    ModifyVariable(SnowballVictims, Operation.AppendToArray, player);
                }
            }
        }
        DestroyProgressBarHudText(progressID);
        DestroyEffect(Snowball);
        DestroyEffect(snowballSoundLow);
        DestroyEffect(snowballSoundHigh);
        DestroyEffect(snowballEffectSparkles);
        DestroyEffect(snowballEffectClouds);
        Snowball = null;
        SetInvisible(EventPlayer(), InvisibleTo.None);
        SetFacing(EventPlayer(), SnowballFacing, Relative.ToWorld);
        StopFacing(EventPlayer());
        StopCamera(EventPlayer());
        SetMoveSpeed(EventPlayer(), 100);
        StopForcingThrottle(EventPlayer());
        foreach (define button in ActionButtons)
        {
            AllowButton(EventPlayer(), button);
        }
        StopHoldingButton(EventPlayer(), Button.PrimaryFire);
        SetAmmo(EventPlayer(), 0, MaxAmmo(EventPlayer()));
    }
}

// Grounded checks don't actually matter here because gravity only makes a difference while you're in the air
rule: "Pharah Quick Fall On"
Event.OngoingPlayer
Player.Pharah
if (!IsOnGround(EventPlayer()))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (PharahQuickFall)
{
    ApplyImpulse(EventPlayer(), Down(), 5, Relative.ToWorld, ContraryMotion.Incorporate);
    SetGravity(EventPlayer(), 200);
}

// I hate this so much, but workshop settings only toggle if any of the conditions are changed, so two rules are actually needed here
rule: "Pharah Quick Fall Off"
Event.OngoingPlayer
Player.Pharah
if (!IsOnGround(EventPlayer()))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
if (PharahQuickFall)
{
    SetGravity(EventPlayer(), 100);
}

rule: "Reaper Death Blossom Stuff"
Event.OngoingPlayer
Player.Reaper
if (IsUsingUltimate(EventPlayer()))
if (ReaperUltGravity || ReaperUltJump)
{
    // messy idk
    if (ReaperUltGravity)
    {
        SetGravity(EventPlayer(), 500);
        if (!ReaperUltJump) SetJumpVerticalSpeed(EventPlayer(), 200);
    }
    if (ReaperUltJump)
    {
        SetJumpVerticalSpeed(EventPlayer(), ReaperUltGravity ? 500 : 250);
    }
    WaitUntil(!IsUsingUltimate(EventPlayer()), 120);
    SetGravity(EventPlayer(), 100);
    SetJumpVerticalSpeed(EventPlayer(), 100);
}

rule: "Tracer Lifesteal"
Event.OnDamageDealt
Player.Tracer
if (TracerLifesteal)
{
    Heal(EventPlayer(), null, EventDamage() * 0.25);
}

rule: "Ana Sleep Damage"
Event.OnDamageTaken
if (Attacker().Hero() == Hero.Ana)
if (EventAbility() == Button.Ability1)
if (AnaSleepDamage)
{
    SetDamageReceived(EventPlayer(), 200);
    WaitUntil(!HasStatus(EventPlayer(), Status.Asleep), 120);
    SetDamageReceived(EventPlayer(), 100);
}

rule: "Lucio Using Beat"
Event.OngoingPlayer
Player.Lucio
if (IsUsingUltimate(EventPlayer()) == true)
if (BeatStatus == 0)
{
    BeatStatus = 1;
    LastBeatUsage = TotalTimeElapsed();
}

rule: "Lucio Stopped Using Beat"
Event.OngoingPlayer
Player.Lucio
if (IsUsingUltimate(EventPlayer()) == false)
{
    BeatStatus = 0;
}
 
rule: "Lucio Hit Ground"
Event.OngoingPlayer
Player.Lucio
if (IsOnGround(EventPlayer()) == true)
if (BeatStatus == 1)
if (TotalTimeElapsed() - LastBeatUsage > 0.7)
{
    BeatStatus = 2;
    if (LucioBeatSelfKnockback)
    {
        ApplyImpulse(EventPlayer(), Up(), 20, Relative.ToWorld, ContraryMotion.Cancel);
    }
    if (LucioBeatDamage)
    {
        Damage(PlayersWithinRadius(PositionOf(EventPlayer()) + Vector(0, -2, 0), 1.5, OppositeTeamOf(TeamOf(EventPlayer())), RadiusLOS.SurfacesAndEnemyBarriers), EventPlayer(), 2000);
    }
}

rule: "Lucio Boop Knockback"
Event.OngoingPlayer
Player.Lucio
if (IsFiringSecondary(EventPlayer()) == true)
if (AngleBetweenVectors(FacingDirectionOf(EventPlayer()), Down()) < 10)
if (LucioBoopSelfKnockback)
{
    ApplyImpulse(EventPlayer(), FacingDirectionOf(EventPlayer()) * -1, 10, Relative.ToWorld, ContraryMotion.CancelXYZ);
}

rule: "Instant Abilities"
Event.OngoingPlayer
    if (WorkshopSettingToggle("Debug", "Instant Abilities (Crouch + Interact)", false, 0) == true)
if (IsButtonHeld(EventPlayer(), Button.Interact) == true)
if (IsButtonHeld(EventPlayer(), Button.Crouch) == true)
{
    SetUltimateCharge(EventPlayer(), 100);
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
    SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 0);
}

rule: "Spawn/Summon Bot"
Event.OngoingPlayer
if (WorkshopSettingToggle("Debug", "Enemy Dummy Bot (Interact)", false, 0) == true)
if (IsButtonHeld(EventPlayer(), Button.Interact) == true)
if (IsButtonHeld(EventPlayer(), Button.Crouch) == false)
{
    if (IsDummyBot(PlayersInSlot(0, Team.Team2)))
    {
        Teleport(PlayersInSlot(0, Team.Team2), EventPlayer());
    }
    else
    {
        CreateDummyBot(Hero.Ana, Team.Team2, 0, PositionOf(EventPlayer()), FacingDirectionOf(EventPlayer()));
    }
    StartHoldingButton(PlayersInSlot(0, Team.Team2), Button.PrimaryFire);
}
